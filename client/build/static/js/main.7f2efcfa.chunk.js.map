{"version":3,"sources":["App.js","index.js","RetrieveData.js"],"names":["App","retrieveData","RetrieveData","organism","document","getElementById","value","trim","split","join","retmax","parseInt","init","e","preventDefault","react_default","a","createElement","className","id","src","alt","href","atl","target","rel","placeholder","type","pattern","onClick","this","handleClick","React","Component","ReactDOM","render","App_App","rp","require","request","defaults","encoding","pubList","imgData","_this","arguments","length","undefined","isNaN","console","log","xhr","XMLHttpRequest","url","base","responseType","onreadystatechange","readyState","DONE","status","response","responseXML","innerHTML","tempList","getElementsByTagName","i","push","replace","retrieveFigures","open","send","pubmedIDList","corsProxy","imgParse","ncbiArticleInfo","pubmedID","final","then","html","link","tempImgList","imgList","DOMParser","parseFromString","getElementsByClassName","p","imgHead","children","getAttribute","splitLink","imgURL","d","data","imgSplit","get","error","body","statusCode","urlUsed","urlSplit","usedPubmedID","u","usedImgName","headers","Buffer","toString","filename","download","click","catch","err"],"mappings":"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","file":"static/js/main.7f2efcfa.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport RetrieveData from './RetrieveData';\n\nexport default class App extends React.Component {\n  init() {\n    let retrieveData = new RetrieveData();\n\n    let organism = document.getElementById('organism').value.trim().split(' ').join('-');\n    let retmax = parseInt(document.getElementById('retmax').value);\n    retrieveData.init(organism, retmax);\n  };\n\n  handleClick(e) {\n    e.preventDefault();\n    \n    let retrieveData = new RetrieveData();\n\n    let organism = document.getElementById('organism').value.split(' ').join('-');\n    let retmax = parseInt(document.getElementById('retmax').value);\n    retrieveData.init(organism, retmax);\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          You need an internet connection for this script to work. If you cannot see the cat below, this script will not work.\n        </div>\n        <br />\n        <div id=\"imageContainer\">\n          <img id=\"imgTest\" className=\"fixedImg\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/An_up-close_picture_of_a_curious_male_domestic_shorthair_tabby_cat.jpg/220px-An_up-close_picture_of_a_curious_male_domestic_shorthair_tabby_cat.jpg\" alt=\"Testing whether internet connection exists or not. No internet means script will fail\" />\n          <br /><br />\n          <p id=\"progress\">Progress will display here with current image link in the process below</p>\n          <a id=\"imgLinkTest\" href=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/An_up-close_picture_of_a_curious_male_domestic_shorthair_tabby_cat.jpg/220px-An_up-close_picture_of_a_curious_male_domestic_shorthair_tabby_cat.jpg\" atl=\"download link\" target=\"_blank\" rel=\"noopener noreferrer\">https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/An_up-close_picture_of_a_curious_male_domestic_shorthair_tabby_cat.jpg/220px-An_up-close_picture_of_a_curious_male_domestic_shorthair_tabby_cat.jpg</a>\n        </div>\n        <br />\n        <hr></hr>\n        <div id=\"start-process\">\n          To start this script, fill the two following inputs for which organism and how many papers you wish to scrape through. If you wish to parse through the maximum number of papers available, search for your species on <a href=\"https://www.ncbi.nlm.nih.gov/pubmed\" atl=\"download link\" target=\"_blank\" rel=\"noopener noreferrer\">PubMed</a> (for example <a href=\"https://www.ncbi.nlm.nih.gov/pubmed/?term=ArabIdopsis+thaliana\" atl=\"download link\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.ncbi.nlm.nih.gov/pubmed/?term=ArabIdopsis+thaliana</a>) and see how many results appear total. You would see it right above the first results saying \"Items: 1 to 20 of #\", that # is the max number of papers available. This scrapper will only scrape through open access or publicly available publications and will not be able to access publications locked behind a paywall.\n          <br /><br />\n          The images are downloaded to your local download location that is designated by your browser you decide to run this tool on.\n          <br /><br />\n          The default suggested run values if you are doing this for the first time be 'Arabidopsis thaliana' (case insensitive, don't worry) and '100'. These are also the values that will run in no input has been put in.\n        <br />\n        <br />\n          Organism: <input id=\"organism\" placeholder=\"Arabidopsis thaliana\" type=\"text\" pattern=\"[a-zA-Z]\"></input>\n          <br />\n          Max papers: <input id=\"retmax\" placeholder=\"100\" type=\"number\"></input>\n          <br /><br />\n          <button id=\"startScrapping\" onClick={this.handleClick}>Start scrapping</button>\n        </div>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","/* eslint-disable no-loop-func */\r\nimport React from 'react';\r\nconst rp = require('request-promise');\r\nvar request = require('request').defaults({ encoding: null });\r\nlet pubList = [];\r\nlet imgData = {};\r\nvar base64ImageData = {};\r\n\r\n/**\r\n * Retrieves data from PubMed on publications available based on an organism and scrape the figures from those publications\r\n */\r\nexport default class RetrieveData extends React.Component {\r\n    /**\r\n     * Retrieves information about the publications\r\n     * @param {String} organism The name of the organism \r\n     * @param {Number} retmax The maximum number of publications that you wish to scrape through, in order of most recent publications date\r\n     */\r\n    ncbiArticleInfo(organism = 'Arabidopsis-thaliana', retmax = 100) {\r\n        // Create defaults if invalid inputs were inserted\r\n        if (organism === '') {\r\n            organism = 'Arabidopsis-thaliana'\r\n        };\r\n        if (retmax === '' || retmax === 0 || isNaN(retmax)) {\r\n            retmax = 100;\r\n        };\r\n        console.log(organism, retmax);\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        let db = 'pubmed';\r\n        pubList = [];\r\n\r\n        let base = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/';\r\n        let url = base + 'esearch.fcgi?db=' + db + '&term=' + organism + '[Organism]&usehistory=y&retmax=' + retmax;\r\n        // console.log(url);\r\n\r\n        xhr.responseType = 'document';\r\n        xhr.onreadystatechange = () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                let response = xhr.responseXML;\r\n                console.log(response);\r\n                document.getElementById('progress').innerHTML = 'Starting scraping';\r\n                document.getElementById('titleOfPage').innerHTML = 'Starting scraping';\r\n\r\n                // Create a list of PMC publication IDs\r\n                let tempList = [];\r\n                if (response && response.getElementsByTagName('IdList')[0]) {\r\n                    tempList = response.getElementsByTagName('IdList')[0]['innerHTML'].trim().split('\\n');\r\n                    for (var i = 0; i < tempList.length; i++) {\r\n                        pubList.push(tempList[i].replace('<Id>', '').replace('</Id>', ''));\r\n                    };\r\n                };\r\n\r\n                console.log(pubList);\r\n                this.retrieveFigures(pubList, retmax);\r\n            };\r\n       };\r\n\r\n       xhr.open('GET', url, true);\r\n       xhr.send();\r\n    };\r\n\r\n    /**\r\n     * Retrieve figures from the publication in the the list provided in pubmedIDList\r\n     * @param {Array} pubmedIDList A list of PMC publication IDs that will be scraped through to retrieve figures from, a default one of '31307397' is provided for manual testing purposes\r\n     */\r\n    retrieveFigures(pubmedIDList = ['31307397']) {\r\n        document.getElementById('progress').innerHTML = 'Starting to retrieve figures';\r\n        document.getElementById('titleOfPage').innerHTML = 'Starting to retrieve figures';\r\n        console.log('Starting to retrieve figures');\r\n        \r\n        for (var i = 0; i < pubmedIDList.length; i++) {\r\n            let corsProxy = 'http://localhost:8080/';\r\n            let url = corsProxy + 'https://ncbi.nlm.nih.gov/pubmed/' + pubmedIDList[i];\r\n            // let url = 'https://ncbi.nlm.nih.gov/pubmed/' + pubmedIDList[i];\r\n    \r\n            if (i === pubmedIDList.length - 1) {\r\n                imgParse(url, pubmedIDList[i], true);\r\n            } else {\r\n                imgParse(url, pubmedIDList[i]);\r\n            };\r\n\r\n            // document.getElementById('progress').innerHTML = 'Article: ' + i + '/' + pubList.length;\r\n            // document.getElementById('titleOfPage').innerHTML = 'Article: ' + i + '/' + pubList.length;\r\n        };       \r\n    };\r\n\r\n    init(organism, retmax) {\r\n        this.ncbiArticleInfo(organism, retmax);\r\n    };\r\n};\r\n\r\n/**\r\n * Retrieve the image itself separated from the publication website on PubMed\r\n * @param {String} url URL of the PubMed website for the publication\r\n * @param {String} pubmedID PMC publication Id for the publication\r\n * @param {Boolean} final Whether this is the last publication to scrape through or not\r\n */\r\nfunction imgParse(url, pubmedID, final = false) {\r\n    rp(url).then(\r\n        function(html) {\r\n            let doc = new DOMParser().parseFromString(html, 'text/html');\r\n            let tempImgList = [];\r\n\r\n            let imgList = doc.getElementsByClassName('figpopup');\r\n            for (var p = 0; p < imgList.length; p++) {\r\n                var imgHead = imgList[p];\r\n                if (imgHead.children.length > 0 && imgHead.children[0].getAttribute('src-large') !== null) {\r\n                    tempImgList.push(imgHead.children[0].getAttribute('src-large'));\r\n                };\r\n            };\r\n\r\n            var link;\r\n            var splitLink = url.split('http://localhost:8080/');\r\n            if (splitLink.length > 1) {\r\n                link = splitLink[1];\r\n            } else {\r\n                link = splitLink[0];\r\n            }\r\n            imgData[link] = tempImgList;\r\n            let imgURL = '';\r\n            for (var d = 0; d < tempImgList.length; d++) {\r\n                imgURL = 'http://localhost:8080/https://ncbi.nlm.nih.gov' + tempImgList[d];\r\n                var imgSplit = tempImgList[d].split('/');\r\n                var imgName = imgSplit[imgSplit.length - 1];\r\n\r\n                var preExistingProgressStatus = document.getElementById('progress').innerHTML.split(',')[0];\r\n                document.getElementById('progress').innerHTML = 'Image position: ' + d + '/' + tempImgList.length;\r\n                document.getElementById('titleOfPage').innerHTML = 'Image position: ' + d + '/' + tempImgList.length;\r\n\r\n                var data;\r\n                request.get(imgURL, function (error, response, body) {\r\n                    if (!error && response.statusCode === 200) {\r\n                        var urlUsed = response['url'];\r\n                        var urlSplit = urlUsed.split('/');\r\n                        var usedPubmedID = 'brokenID';\r\n                        for (var u = 0; u < urlSplit.length; u++) {\r\n                            if (urlSplit[u] !== undefined && urlSplit[u] !== '' && isNaN(urlSplit[u]) === false) {\r\n                                usedPubmedID = urlSplit[u];\r\n                                break;\r\n                            };\r\n                        };\r\n                        var usedImgName = urlSplit[urlSplit.length - 1];\r\n\r\n                        console.log(urlUsed);\r\n                        data = \"data:\" + response.headers[\"content-type\"] + \";base64,\" + new Buffer(body).toString('base64');\r\n\r\n                        // This will download the image\r\n                        document.getElementById('imgTest').src = data;\r\n                        document.getElementById('imgLinkTest').href = data;\r\n                        var filename = usedPubmedID + '-' + usedImgName;\r\n                        document.getElementById('imgLinkTest').download = filename;\r\n                        document.getElementById('imgLinkTest').innerHTML = urlUsed;\r\n                        document.getElementById('imgLinkTest').click();\r\n                    }\r\n                });\r\n\r\n                // Stop process if this is true\r\n                if (final === true) {\r\n                    // console.log(imgData);\r\n                    document.getElementById('progress').innerHTML = 'Done';\r\n                    document.getElementById('titleOfPage').innerHTML = 'Done';\r\n                };\r\n            };\r\n\r\n            if (tempImgList.length === 0 && final === true) {\r\n                console.log(imgData);\r\n                    document.getElementById('progress').innerHTML = 'Done';\r\n                    document.getElementById('titleOfPage').innerHTML = 'Done';\r\n            };\r\n        }\r\n    ).catch(\r\n        function(err) {\r\n            console.log(err);\r\n        }\r\n    )\r\n};"],"sourceRoot":""}